{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/main.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        #calendar {
            height: 800px;
            margin: 20px auto;
        }
        .fc-event {
            cursor: pointer;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid">
    <div id="calendar"></div>
    <div id="modal-container" class="modal fade" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Réserver un créneau</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="modal-form-container"></div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: '/api/creneaux',
                eventClick: function(info) {
                    if (info.event.extendedProps.reserved) {
                        Swal.fire('Information', 'Ce créneau est déjà réservé', 'info');
                    } else {
                        fetch('/reservation/create', {
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        })
                        .then(response => {
                            return response.text().then(text => {
                                try {
                                    return JSON.parse(text);
                                } catch (e) {
                                    console.error("Réponse invalide JSON :", text);
                                    throw new Error("La réponse du serveur n'est pas du JSON valide.");
                                }
                            });
                        })
                        .then(data => {
                            document.getElementById('modal-form-container').innerHTML = data.html;
                            const modal = new bootstrap.Modal(document.getElementById('modal-container'));
                            modal.show();

                            const creneauInput = document.querySelector('[name="reservation[creneau]"]');
                            if (creneauInput) {
                                creneauInput.value = info.event.extendedProps.creneauId;
                            }
                        })
                        .catch(error => {
                            Swal.fire('Erreur', error.message, 'error');
                        });
                    }
                }
            });
            calendar.render();

            document.addEventListener('submit', function(e) {
                if (e.target.classList.contains('ajax-form')) {
                    e.preventDefault();
                    const form = e.target;

                    fetch(form.action, {
                        method: form.method,
                        body: new FormData(form),
                        headers: { 
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => {
                        return response.text().then(text => {
                            try {
                                return JSON.parse(text);
                            } catch (e) {
                                console.error("Erreur JSON lors de la soumission :", text);
                                throw new Error("Erreur de parsing JSON à la soumission.");
                            }
                        });
                    })
                    .then(data => {
                        if (data.success) {
                            bootstrap.Modal.getInstance(document.getElementById('modal-container')).hide();
                            Swal.fire('Succès', data.message, 'success');

                            if (data.wasEmpty) {
                                refreshReservationsList();
                            } else {
                                const tbody = document.getElementById('reservations-list');
                                const emptyRow = tbody?.querySelector('.text-center.text-muted');
                                if (emptyRow) emptyRow.remove();

                                if (tbody) {
                                    tbody.insertAdjacentHTML('afterbegin', data.reservationRow);
                                }
                            }

                            calendar.refetchEvents();
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Erreur',
                            text: error.message || 'Une erreur est survenue',
                            icon: 'error'
                        });
                    });
                }
            });
        });
    </script>
{% endblock %}
