{% extends 'base.html.twig' %}

{% block title %}Créneaux - {{ resource.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        h1 {
            margin-top: 5rem;
            margin-bottom: 2rem;
        }

        .card {
            border-radius: 0;
            background-color: #d4ecff;
            margin: 1rem;
        }

        .card .card-body,
        .card {
            border: 1.5px solid;
        }

        .card .badge {
            padding: 0.4rem 0.6rem;
            font-size: 0.9rem;
            border-radius: 0.25rem;
            white-space: nowrap;
        }

        .bg-success {
            background-color: #28a745;
            color: white;
        }

        .bg-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn-custom-primary,
        .btn-custom-danger {
            border-radius: 0;
            font-size: 1.1rem;
            font-weight: 500;
            padding: 0.4rem 0.8rem;
            transition: 0.3s;
            white-space: nowrap;
        }

        .btn-custom-primary {
            color: white;
            background-color: black;
            border: 1.5px solid black;
        }

        .btn-custom-primary:hover {
            background-color: #333;
            border-color: #333;
        }

        .btn-custom-danger {
            color: black;
            background-color: white;
            border: 1.5px solid black;
        }

        .btn-custom-danger:hover {
            background-color: white;
            color: black;
            border-color: #333;
        }

        .timeslot-card {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            align-items: center;
            justify-content: space-between;
            gap: 2rem;
            padding: 1rem;
            border: 1px solid black;
        }

        .timeslot-info {
            flex-grow: 1;
            display: flex;          
            flex-wrap: nowrap;      
            align-items: center;
            gap: 1rem;
        }

        .timeslot-info p {
            margin: 0;
            white-space: nowrap; 
        }

        .timeslot-actions {
            display: flex;
            flex-direction: row;
            gap: 0.5rem;
            align-items: center;
        }

        .add-timeslot-btn {
            margin: 1rem; 
            border-radius: 0;
            background-color: none;
            border: 1.5px solid black;
            padding: 0.75rem 1rem;
            font-size: 1.1rem;
            font-weight: 500;
            text-align: center;
            text-decoration: none;
            color: black;
            display: block;
            width: auto;
            white-space: nowrap;
            transition: background-color 0.3s, border-color 0.3s;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container">
    <h1 class="text-3xl font-bold">Créneaux pour la ressource : {{ resource.name }}</h1>

    <div class="grid grid-cols-1 gap-4" style="margin-bottom: 4rem;">
        <a href="{{ path('client_timeslot_new', { 'resource': resource.id }) }}"
           class="add-timeslot-btn">
            + Ajouter un créneau
        </a>

        {% if timeslots is empty %}
            <div class="alert alert-info" style="margin: 1rem;">
                Aucun créneau disponible pour cette ressource.
            </div>
        {% else %}
            {% for timeslot in timeslots %}
                <div class="card shadow-sm border" id="timeslot-{{ timeslot.id }}">
                    <div class="timeslot-card">
                        <div class="timeslot-info">
                            <h2 class="text-lg font-semibold inline-block mr-2">Créneau #{{ timeslot.id }}</h2>
                            <p><strong>Début :</strong> {{ timeslot.startDatetime|date('d/m/Y H:i') }}</p>
                            <p><strong>Fin :</strong> {{ timeslot.endDatetime|date('d/m/Y H:i') }}</p>
                            <span class="badge {{ timeslot.isAvailable ? 'bg-success' : 'bg-danger' }}">
                                {{ timeslot.isAvailable ? 'Disponible' : 'Indisponible' }}
                            </span>
                        </div>
                        <div class="timeslot-actions">
                            <a href="{{ path('client_timeslot_edit', {
                                'resource': resource.id,
                                'timeslot_id': timeslot.id
                            }) }}" class="btn btn-custom-primary">
                                Modifier
                            </a>
                            <form method="post" action="{{ path('client_timeslot_delete', {
                                'resource': resource.id,
                                'timeslot_id': timeslot.id
                            }) }}">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ timeslot.id) }}">
                                <button type="submit" class="btn btn-custom-danger delete-timeslot"
                                        data-timeslot-id="{{ timeslot.id }}"
                                        data-resource-id="{{ resource.id }}">
                                    Supprimer
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            {% endfor %}
        {% endif %}
    </div>

    <div class="mt-6">
        <a href="{{ path('client_resources') }}" class="btn-custom-primary" style="text-decoration: none;">
            <i class="fas fa-arrow-left"></i> Retour aux ressources
        </a>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.delete-timeslot').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    const timeslotId = this.getAttribute('data-timeslot-id');
                    const resourceId = this.getAttribute('data-resource-id');
                    const form = this.closest('form');

                    Swal.fire({
                        title: 'Êtes-vous sûr ?',
                        text: "Cette action est irréversible !",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Oui, supprimer !',
                        cancelButtonText: 'Annuler'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(form.action, {
                                method: 'POST',
                                headers: {
                                    'X-Requested-With': 'XMLHttpRequest',
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                },
                                body: new URLSearchParams(new FormData(form))
                            })
                            .then(response => {
                                if (response.ok) {
                                    Swal.fire(
                                        'Supprimé !',
                                        'Le créneau a été supprimé.',
                                        'success'
                                    );
                                    document.querySelector(`#timeslot-${timeslotId}`).remove();
                                } else {
                                    Swal.fire(
                                        'Erreur !',
                                        'La suppression a échoué.',
                                        'error'
                                    );
                                }
                            })
                            .catch(() => {
                                Swal.fire(
                                    'Erreur !',
                                    'Une erreur est survenue.',
                                    'error'
                                );
                            });
                        }
                    });
                });
            });
        });
    </script>
{% endblock %}
