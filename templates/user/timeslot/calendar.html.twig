{% extends 'base.html.twig' %}

{% block title %}Calendrier - {{ resource.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/main.min.css" rel="stylesheet" />
    <style>
        #calendar {
            max-width: 1100px;
            margin: 40px auto;
            height: 700px;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h2>Créneaux pour la ressource : {{ resource.name }}</h2>
        <div id="calendar"></div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/main.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const calendarEl = document.getElementById('calendar');

            if (typeof FullCalendar === 'undefined') {
                console.error('❌ FullCalendar non chargé');
                calendarEl.innerHTML = '<p>Erreur : FullCalendar ne s\'est pas chargé.</p>';
                return;
            }

            const csrfToken = '{{ csrf_token("create_booking") }}';

            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                timeZone: 'Europe/Paris',
                firstDay: 1,
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: {
                    url: '/api/timeslots',
                    method: 'GET',
                    extraParams: {
                        resourceId: {{ resource.id|e('js') }}
                    },
                    failure: () => {
                        alert('Erreur lors du chargement des créneaux.');
                    }
                },
                eventClick: function(info) {
                    const event = info.event;
                    const props = event.extendedProps;

                    if (!props.isAvailable) {
                        alert('Ce créneau est déjà réservé.');
                        return;
                    }

                    if (confirm(`Voulez-vous réserver ce créneau ?\nDébut: ${event.start.toLocaleString()}\nFin: ${event.end.toLocaleString()}`)) {
                        fetch('/api/bookings', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-Requested-With': 'XMLHttpRequest',
                                'X-CSRF-TOKEN': csrfToken
                            },
                            body: new URLSearchParams({
                                timeslotId: event.id
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert(data.message);
                                // Mise à jour visuelle du créneau
                                event.setProp('title', 'Réservé');
                                event.setProp('color', '#dc3545');
                                event.setExtendedProp('isAvailable', false);
                            } else {
                                alert('Erreur: ' + (data.error || 'Impossible de créer la réservation.'));
                            }
                        })
                        .catch(() => {
                            alert('Erreur réseau lors de la réservation.');
                        });
                    }
                }
            });

            calendar.render();
            console.log('✅ Calendrier initialisé pour la ressource {{ resource.name }}');
        });
    </script>
{% endblock %}
